краткая памятка по GIT для меня||||||
=====================================

установка и настройка git
sudo apt install git
# add-apt-repository ppa:git-core/ppa
# apt update; apt install git

устанавливаем Gitg

вводим необходимые данные
git config --global user.email "you@example.com"
git config --global user.name "Ваше Имя"

git config  --global core.editor vim
git config  --global merge.tool vimdiff
проверяем
git config --list
-----------------------------------------------
посмотреть сгенерирован ли ключ здесь ssh
$ cd ~/.ssh
$ ls
---------------------------------------------------

необходимо создать открытый и закрытый ключи для соединения с сервером по ssh
ssh-keygen
на сайте гитхаба создать ключ, используя открытый ключ:
нужно скопировать содержимое открытого ключа и добавить в форме на сайте
можно использовать утилиту xclip
sudo apt-get install xclip
далее 
xclip -sel clip < ~/.ssh/id_rsa.pub
содержимое ключа скопировано в буфер
далее можно использовать вставку из буфера

------------------------------------------------------------------------------

git init
git add .
git commit -a -m 'first commit'

Для того, чтобы в систему не попадали временные файлы, можно их занести в файл .gitignore, который нужно создать самостоятельно и разместить в корневом каталоге проекта (на том же уровне, что и .git директория)

git remote add origin git@github.com:username/reponame.git
git push -u origin master

-----------------------------------------------------------------------------
клонирование репозитория
git clone git@github.com:nik_name/repo_name.git name_dir

-------------------------------------------------------------------------------



-------------------------------------------------------------------------
добавление и удаление файлов для фиксаци коммитом
-------------------------------------------------------------------------
добавление 
git add filemane - добавить файл для ближайшего коммита
git rm filename - удаление файла
для того что бы git не проказывал те файлы которые есть в директории 
их можно добавить в .gitignore
vim .gitignore
git add .gitignore
файл нужно создавать в той директории где лежит каталог .git
далее прописываем в этом файле названия и типы файлов которые не хотим отслеживать

отмена индексации файла
git reset HEAD filename 


----------------------------------------------------------------------
добавление удаление коммитов откат к предыдущим коммитам
----------------------------------------------------------------------
git commit -m "comment" - создание коммита с коментарием
команда $ git checkout -- [имя файла] сбрасывает файл к состоянию в последнем коммите

откат последнего коммита
$ git revert HEAD
Исправление ошибки новым коммитом
Создание нового коммита который восстанавливает предыдущее состояние перед HEAD


git stash - прячет изменения сделанные после коммита
помогает устранить ошибки при команде git pull
---------------------------------------------------------------------- 
В случае, если в файл были внесены изменения и эти изменения уже подготовлены для фиксации в коммит с помощью команды git add, то в этом случае для сброса файла в исходное состояние нужно:

    Убрать файл из подготовленного состояния к фиксации в коммите, т.е. перевести файл из состояния staged.
    Сбросить файл к исходному состоянию.

подучается нужно 
1 git reset HEAD filename
2 git checkout -- [имя файла]





-------------------------------------------------------------------------------
Для того, чтобы отменить регистрацию удаленного репозитария введите:

git remote rm origin


Это может понадобиться, если вы захотите поменять SSH доступ на HTTPS. После этого можно добавить его опять, например под именем github и протоколом HTTPS.

git remote add github https://github.com/myuser/project.git


Следующей командой вы занесете все изменения на Github, которые были сделаны в локальном репозитории .

git push -u origin master


Ключ -u используется для того, чтобы установить связь между удаленным репозиторием github(origin) и вашей веткой master. Все дальнейшие изменения вы можете переносить на удаленный репозиторий упрощенной командой.

git push


перед git push может может понадобиться команда git pull

----------------------------------------------------------------------

Что бы создать новую ветку локально следует добавить параметр -b к команде checkout.

git checkout -b <name_of_branch>

--------------------------------------------------------------------------


Допустим, мы создали новую ветку в локальном репозитории. Новая ветка создавалась следующей командой:


$ git checkout -b dev

Switched to a new branch 'dev'


Для публикации в удаленном репозитарии можно использовать следующую команду: 


$ git push origin dev

Total 0 (delta 0), reused 0 (delta 0)

To git@github.com:devlabuser/sharp.git

 * [new branch]      dev -> dev


Однако, такая команда не сделает ветку dev на удаленном репозитарии отслеживаемой и связанной с локальной. Поэтому, лучше всего воспользоваться опцией --set-upstream:


$ git push --set-upstream origin dev


Или, что то же самое, но с сокращенным именем опции:


$ git push -u origin dev


После этой команды локальная ветка dev и ветка dev в репозитарии будут связаны между собой. То есть, после такой команды (которая выполняется единожды), можно будет отправлять/принимать изменения лишь выполняя git push из ветки без указания всяких алиасов для сервера и удалённых веток. Это сделано просто для удобства. 



---------------------------------------------------------------------------

Удалить ветку на сервере

git push origin --delete имя_ветки
-----------------------------
удалить ветку в локальной рабочей копии:
$ git branch -d branch-name
----------------------------
 Переименовать локальную ветку

git branch -m oldname newname

-----------------------------------------------------------------------------------

Для того чтобы удалить все файлы в папке, которые не относятся к проекту и не сохранены в репозитории, можно воспользоваться командой:

git clean -df
------------------------------------------------------------------------------------


