компилируем нашу программу с параметром -g3 -O0

запуск с текстовым интерфейсом
gdbtui myprogram
(text user interface)
очень удобно
------------------------------------------------------


команды для gdb 

run  можно запускать с парамертрами командной строки

q выход

n следующая строчка кода

s переход внутрь функции

c - continue продолжение выполнения

finish
    Продолжить выполнение до возврата из функции в выбранном кадре стека.

until шагать до достижения какой то строчки кода
----------------------------------------------------------

вывод значения переменной
--------------------------
p имя переменной 
можно также указать формат вывода переменной
------------
display выраж
    Добавляет выражение выраж к списку выражений, отображаемых каждый раз, когда ваша программа останавливается

undisplay номера...
delete display номера...
    Удалить элементы с номерами номера из списка выражений, подлежащих отображению. undisplay не повторяется при последующем нажатии RET. (Иначе вы сразу получили бы сообщение об ошибке `No display number ...'.) 
disable display номера...
    Отключить отображение элементов с номерами номера. Отключенные элементы не выводятся автоматически, но и не забываются. Впоследствии их можно снова включить. 
enable display номера...
    Включить отображение элементов с номерами номера. Выражения, соответствующие этим номерам, снова будут выводиться автоматически, пока вы укажете обратное. 
display
    Отобразить текущие значения выражений из списка, точно так же, как это происходит при остановке вашей программы. 
info display
    Вывести список выражений, ранее установленных для автоматического отображения, каждое с его номером элемента, но не показывая значений. Список включает отключенные выражения, с соответствующей пометкой. Он также включает в себя выражения, которые не могут быть показаны прямо сейчас, потому что обращаются к автоматическим переменным, недоступным в данный момент. 

Если отображаемое выражение обращается к локальным переменным, оно не имеет смысла вне того лексического контекста, для которого оно устанавливалось. Такое выражения отключается, как только выполнение входит в контекст, где одна из его переменных становится неопределенной. Например, если вы дадите команду display last_char, находясь внутри функции с аргументом last_char, GDB будет отображать этот аргумент, пока программа останавливается внутри этой функции. Как только она остановится где-то еще---где нет переменной last_char---отображение будет отключено автоматически. Вы можете снова включить его при следующей остановке программы там, где last_char будет вновь иметь смысл.
-----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------- 
list -15 - показать код в районе 15 строки
---------
посмотреть где мы находимся
where
---------


bt backtrace
далее можно перейти к нужному стековому кадру
fr 1

можно не указывать конкретный номер фрейма 
up/down number
можно указать смещение
-------------------------------------------------------------------------------

точки останова
---------------
b число - создание точки останова
или b функция
b +1 или b -1 создание точки останова относительно текущего места

b номер строки if условие при котором будет работать точка останова
--------------------------
clear
    Удаляет любые точки останова, установленные на следующей инструкции, которая должна быть выполнена в выбранном кадре стека (see section Выбор кадра). Когда выбран самый внутренний кадр, это хороший способ удалить ту точку останова, на которой ваша программа только что остановилась. 
clear функция
clear имя-файла:функция
    Удалить любые точки останова, установленные на входе в функцию. 
clear номер-строки
clear имя-файла:номер-строки
    Удалить все точки останова, установленные на или внутри кода на указанной строке. 
delete [breakpoints] [диапазон...]
    Удалить точки останова, наблюдения или перехвата из диапазона, указанного в качестве аргумента. Если аргумент не задан, удалить все точки останова (GDB запрашивает подтверждение, если у вас не установлено set confirm off). Вы можете сократить это команду как d. 


enable/disable можно разрешать запрещать точки останова
-------------------------------------------------------

set variable n = n+1 можно изменить значение переменной
--------------------------------------------------------

Команды точки останова
-----------------------
Вы можете подать любой точке останова (наблюдения или перехвата) ряд команд, которые будут выполняться при остановке вашей программы на этой точке останова. Например, вы можете захотеть вывести значения определенных выражений, или включить другие точки останова.

commands [номер]
... список-команд ...
end 
---------------------------


Установка точек перехвата
-------------------------
Вы можете использовать точки перехвата, чтобы вызвать остановку отладчика в ответ на определенные типы событий в программе, такие как исключения в Си++ или загрузка разделяемой библиотеки. Для установки точки перехвата используйте команду catch.

catch событие
    Остановиться, когда происходит событие. Событие может быть одним из:

    throw
        Выбрасывание исключения Си++. 
    catch
        Перехват исключения Си++. 
    exec
        Вызов exec. В настоящее время это доступно только на HP-UX

kill - убивает приложение
=====================================================================================end
-------------------------------------------------------------------------
нужно найти как создавать открывать и просматривать файлы дампа
найти настройки которые позволяют писать файл дампа в указанное место

------------------------------------------------------------------
/var/lib/systemd

многопоточные приложения
info threads - список нитей
thread 2 - переход на поток 2 для отладки потока
